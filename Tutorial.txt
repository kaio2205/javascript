Aula 1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Na linguagem JS o ; é opcional
Podemos usar "" ou '' só não podemos misturar "'
console.log //escrever no terminal
console.clear() // limpar a tela do terminal
Dica: "" Textos '' Importações

Nas estruturas de controle condicional e nos laços de repetições podemos omitir as chaves, porém só uma linha de código é vinculada
Dica: Não omitir as chaves

Variáveis na linguagem JS são dinamicamente tipadas e somente temos 3 tipos (string, number e boolean)
Para declarar uma constante ou variável podemos usar:
const, var e let
var (obsoleto - não usar, pois pode gerar BUG no projeto)

Strings:
.repace(",",".")  //substitui um caractere por outro

Concatenação (unir texto com conteúdo de variáveis)
+ (evitar o uso devido a tipagem dinâmica)
`${}` (mais usado na linguagem JS)

Numbers:
Number (converte para o tipo numérico)
Number.isInteger (verifica se um número é inteiro ou não inteiro)
.toFixed(2) (formatar em 2 casas decimais)

Booleans:
Só admitem 2 valores: true / false

Aula 2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Operadores aritméticos
ATENÇÃO a regra de precedência:
1º) Parênteses
2º) Multiplicação
3º) Divisão
4º) Soma
5º) Subtração

Comparadores:
Observação importante:
NÃO usar os comparadores == != (riscos devido a tipagem dinâmica)

----------------------------
NPM (Node Package Manager)
Gerenciador de pacotes node (pacotes com funcionalidades que podem ser adicionadas ao node)
Para gerenciar(versão, atualizações etc.) os pacotes node, é necessário configurar o package.json 

json(JavaScript Object Notation)
npm -version
npm ls (listar pacotes instalados)
npm i (instalar um pacote)
npm r (remover um pacote)

observação: os pacotes são instalados no projeto(raiz)

Passo 1 - Criar o arquivo package.json
npm init

Repositório de pacotes:
https://www.npmjs.com/

Exercício:
Criar no console JS um app para calcular a porcentagem, usando regra de 3, conforme modelo:

10% de 200 = 20
X      Y     valor

200 ------------- 100%
        \   / 
          X
        /   \      
valor ----------- 10%

valor x 100 = 200 x 10

valor x 100 = 2000
 
            2000
valor  =  --------
             100

        20
valor = --
         1

valor = 20 

Dedução da fórmula para calcular porcentagem usando regra de 3

10% de 200 = 20
X      Y     valor

Y   ------------- 100%
        \   / 
          X
        /   \      
valor ----------- X

valor * 100 = y * x

valor = (x * y) / 100

Variáveis:
3 variáveis:  x y valor

Entrada:
x , y

Processamento:
valor = (x * y) / 100

Saída:
valor

-------------------------------------
Funções:
Função é um bloco de código reutilizável
Função simples:
function nome() {
        
}

Função com retorno
function nome() {
  return
}

Funções anônimas
const nome = function () {

}

let nome = function () {
        
}

Funções em JavaScript moderno podem ser simplificadas

_____________________________________________________
obs:
typeof //verifica a tipagem dinâmica
tipos primitivos (string, number e boolean)
function
object

_____________________________________________________
POO - Programação Orientada a Objetos

Pilares:
- Abstração
- Herança
- Polimorfiamo
- Encapsulamento (Segurança)

Atenção!
Toda classe modelo inicia com uma letra maiúscula

IMPORTANTE!!!
new -> indica a criação de um objeto
this -> quando se refere a ele mesmo
super -> indica o uso de atributos da classe pai
polimorfismo é a mudança do comportamento de um método já existente.
*** Atenção O polimorfismo não cria outro método, ele apenas modifica o comportamento de um método existente. Obrigatório usar o mesmo nome do método da classe pai.

DICA:
class Classe {} //cria uma classe modelo
- O nome da classe sempre deve começar com uma letra maiúscula
- Classe (biologia)
- objeto (new) (substantivo)
- atributos (variáveis) (adjetivos)
- ações(métodos/funções) (verbos)

Encapsulamento
1) proteger a variável criando um modificador privado (acesso exclusivo da classe ao qual pertence)
2) criar uma função para obter o conteúdo da variável (get)
3) criar uma função para gravar um dado na variável (set)

No JavaScript usamos _ antes da variável para encapsular

---------------------------------------------------------
No JavaScript objetos podem ser criados sem uma classe modelo
Estruturas de dados usando objetos
Exemplos:
- package.json
- coleção do banco de dados (MongoDB)

ATENÇÃO !!!
Tipos no JavaScript
- string
- number
- boolean
- function
- object


Aula 6 >>>>>>>>>>>>>

array (Vetor)
-   array multidimencional (matrix)
-  é uma forma de especial de trabalhar com variáveis
-  Indice  [0] [1].....
- Na linguagem JS array pe um objeto

Atenção!!!!!!!!
cuidado ao manipular os dados e alterar o Indicedo array
Mais seguro:
push(): Metodo usado para add ao final do array 
pop() : excluir o ultimo registro
delete(): excluir um dado sem alterar o indice 

Percorrendo um array

1) for forEach
2) map() // percorre  o array, faz algo gera outro array com resultado 


um array tambem pode ser criando como se fosse um objeto 

let nome = []
let nome = new array()


um array pode ser criado com uma estruturas de dados junto com objetos e podem  ser usasdos filtros para manipulaçao dos dados 

sempre criar uma copia do array antes ( para exibiçao ) antes de filtrar os dados 
-------------------------------------------------------------------------
DOM documment object model 
 é tecnica para identificar elementos html (tags) que serao manipulados pelo css ou js
 é uma forma de trabalhar objetos com html
A tecnica consiste em atribuir um id a um elemento 

setTimeout((){
 usado para executar uma funçao infinitamente a cada determinado segundo    
},1000)

O JS capaz de de add uma class ou remover  do css
-----------------------------------------------------------------------------------------

Plataforma node
Obs Ao colocar um Repositório ou trabalhar em um outro pc é nescessario reinstalar as bibliotecas presentes nas dependecia do package.json


npm install 

---------------------------------------------------------------------------------

Assincronismo:
Metodo e funçoes que permitem ao Js trabalhar multitarefas
-Banco de dados 
-Acesso de URL(serviços de nuvem, web services, apis,etc)
-acesso ao disco(HD,SSD etc) do equipamento

Promise ("Promessa")
1) A resposta a requisiçao pode ou nao dar certo ao certo
2) A resposta pode ter um atraso (tempo de resposta)
sintaxe: function logar(login, senha){
    // uso de promise para trabalhar a requisiçao ao banco de dados de forma assincrona 
    return new Promise((resolve, reject)=>{
        
    })
// resolve - OK
// reject  - erro

// quando ttrabalhamos com promises, devemos usar a estrutura abaixo para obter o resultado da funçao 

.then(()=>{})
.catch(()=>{})

